{"version":3,"sources":["components/Pokemon.js","components/PokemonList.js","App.js","index.js"],"names":["Pokemon","id","name","image","type","typeStyle","className","src","alt","PokemonList","pokemons","map","pokemon","i","sprites","other","dream_world","front_default","types","App","useState","allPokemons","setAllPokemons","loadMore","setLoadMore","fetchAllPokemons","a","fetch","res","json","data","next","result","forEach","currentList","push","createPokemonObject","results","useEffect","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAoBeA,EAjBC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,GAAIC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAC3BC,EAAS,UAAMD,EAAN,iBAEb,OACA,sBAAKE,UAAU,kBAAf,UACI,qBAAKA,UAAU,YAAf,SACI,kCAAKL,OAET,qBAAKM,IAAKJ,EAAOK,IAAKN,IACtB,sBAAKI,UAAU,iBAAf,UACI,6BAAKJ,IACL,uCAAS,sBAAMI,UAAWD,EAAjB,SAA6BD,IAAtC,cCMGK,G,MAhBK,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACpB,OACE,qBAAKJ,UAAU,YAAf,SACGI,EAASC,KAAI,SAACC,EAASC,GAAV,OACR,cAAC,EAAD,CACEZ,GAAKW,EAAQX,GACbC,KAAMU,EAAQV,KACdC,MAAOS,EAAQE,QAAQC,MAAMC,YAAYC,cACzCb,KAAOQ,EAAQM,MAAM,GAAGd,KAAKF,MACxBW,UCqCJM,MA/Cf,WAAe,MAGyBC,mBAAS,IAHlC,mBAGNC,EAHM,KAGOC,EAHP,OAImBF,mBAAS,8CAJ5B,mBAING,EAJM,KAIIC,EAJJ,KAQPC,EAAgB,uCAAG,8BAAAC,EAAA,sEACLC,MAAMJ,GADD,cACjBK,EADiB,gBAEJA,EAAIC,OAFA,OAEjBC,EAFiB,OAKvBN,EAAYM,EAAKC,MAGW,SAACC,GAC3BA,EAAOC,QAAP,uCAAe,WAAMrB,GAAN,iBAAAc,EAAA,sEACKC,MAAM,qCAAD,OAAsCf,EAAQV,OADxD,cACP0B,EADO,gBAEMA,EAAIC,OAFV,OAEPC,EAFO,OAIbR,GAAe,SAAAY,GAAW,4BAAQA,GAAR,CAAqBJ,OAE/CT,EAAYc,KAAKL,GANJ,2CAAf,uDAUFM,CAAoBN,EAAKO,SAnBF,2CAAH,qDA2BpB,OAJFC,qBAAU,WACRb,MACC,IAGC,sBAAKnB,UAAU,gBAAf,UACE,yCAGE,cAAC,EAAD,CAAaI,SAAUW,IAEzB,wBAAQkB,QAAS,kBAAKd,KAAtB,2BCxCRe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7b21d6b4.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Pokemon.css'\r\n\r\nconst Pokemon = ({id, name, image, type}) => {\r\n  const typeStyle = `${type} type-wrapper`\r\n  \r\n    return (\r\n    <div className=\"card capitalize\">\r\n        <div className=\"container\">\r\n            <p>#{id}</p>\r\n        </div>\r\n        <img src={image} alt={name} />\r\n        <div className=\"detail-wrapper\">\r\n            <h3>{name}</h3>\r\n            <p>Type: <span className={typeStyle}>{type}</span> </p>     \r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pokemon\r\n","import React from 'react'\r\nimport Pokemon from './Pokemon'\r\nimport './PokemonList.css'\r\n\r\nconst PokemonList = ({pokemons}) => {\r\n  return (\r\n    <div className='container'>\r\n      {pokemons.map((pokemon, i) => \r\n            <Pokemon \r\n              id= {pokemon.id}\r\n              name={pokemon.name}\r\n              image={pokemon.sprites.other.dream_world.front_default}\r\n              type= {pokemon.types[0].type.name}\r\n              key={i}          \r\n            />\r\n          )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PokemonList\r\n","import PokemonList from './components/PokemonList';\nimport React, {useState, useEffect} from 'react';\n\nfunction App() {\n\n  //Initialize hooks\n  const [allPokemons, setAllPokemons] = useState([]);\n  const [loadMore, setLoadMore] = useState('https://pokeapi.co/api/v2/pokemon?limit=20');\n\n  //Fetch PokeAPI function, and store result into data variable\n  //Result includes name and another link to call api for more details on the pokemon\n  const fetchAllPokemons = async () => {\n    const res = await fetch(loadMore)\n    const data = await res.json()\n    \n    //Set Load More into the next url if user wants to continue browsing the next list on the pokedex\n    setLoadMore(data.next)\n    \n    //For each pokemon in first API result, call another API to get their details.\n    const createPokemonObject = (result) => {\n      result.forEach(async pokemon => {\n        const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemon.name}`)\n        const data = await res.json()\n        //Store the Pokemon details in the currentList array.\n        setAllPokemons(currentList => [...currentList, data])\n        //Push the currentList array to allPokemons state array.\n        allPokemons.push(data)\n      })\n    }\n    //Call the create pokemon object function. API result based on 2nd API call.\n    createPokemonObject(data.results)\n  }\n  //When App first mount, call fetchAllPokemons function. This function will not end in infinite loop because\n  //of the empty dependency.\n  useEffect(() => {\n    fetchAllPokemons()\n  }, [])\n\n    return (\n      <div className=\"app-container\">\n        <h1>Pokedex</h1>\n        {/* For each pokemon in allPokemons array state, call PokemonList and give id, name, image, type, and key as props */}\n        {/* This will be used to display the pokemon details in a card */}\n          <PokemonList pokemons={allPokemons} />\n        {/* If load more button is clicked, call fetchAllPokemons() but with the next API link to get the next list of pokemons */}\n        <button onClick={()=> fetchAllPokemons()}>Load More</button>\n      </div>\n    );\n  }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}